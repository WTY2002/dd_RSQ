cmake_minimum_required(VERSION 3.25)
project(SKYLINE C)

set(CMAKE_C_STANDARD 11)
# 设置编译选项
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall")

# 添加源文件目录
set(OPENSSL_INCLUDE_DIR "D:\\OpenSSL-Win64\\include")
set(OPENSSL_CRYPTO_LIBRARY "D:\\OpenSSL-Win64\\lib\\VC\\x64\\MT\\libcrypto_static.lib")
set(OPENSSL_SSL_LIBRARY "D:\\OpenSSL-Win64\\lib\\VC\\x64\\MT\\libssl_static.lib")
aux_source_directory(include SOURCE_FILES)
aux_source_directory(test SOURCE_FILES)
include_directories(include ${OPENSSL_INCLUDE_DIR})


add_executable(${PROJECT_NAME} ${SOURCE_FILES} test/main.cpp
            include/SHE.cpp
            include/SHE.h
            include/PHE.cpp
            include/PHE.h
    )
target_include_directories(${PROJECT_NAME} PUBLIC include)
# 链接 OpenSSL 库
target_link_libraries(${PROJECT_NAME}  ${OPENSSL_SSL_LIBRARY} ${OPENSSL_CRYPTO_LIBRARY} ws2_32 Crypt32)
target_link_libraries(skyline_test ${OPENSSL_SSL_LIBRARY} ${OPENSSL_CRYPTO_LIBRARY} ws2_32 Crypt32)

#
#cmake_minimum_required(VERSION 3.25)
#project(SKYLINE C)
#
#set(CMAKE_C_STANDARD 11)
#set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall")
#
## 强制使用静态链接的 OpenSSL 库
#set(OPENSSL_INCLUDE_DIR "D:\\software\\lib\\OpenSSL\\include")
#set(OPENSSL_CRYPTO_LIBRARY "D:\\software\\lib\\OpenSSL\\lib\\vc\\x64\\MT\\libcrypto_static.lib")
#set(OPENSSL_SSL_LIBRARY "D:\\software\\lib\\OpenSSL\\lib\\vc\\x64\\MT\\libssl_static.lib")
#
#aux_source_directory(include SOURCE_FILES)
#include_directories(include ${OPENSSL_INCLUDE_DIR})
#
#
## 编译为动态链接库（DLL）
#add_library(${PROJECT_NAME} SHARED ${SOURCE_FILES} include/eTPSS.c)
#set_target_properties(${PROJECT_NAME} PROPERTIES
#        LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/bin)
## 链接 OpenSSL 和 eTPSS 库
#target_link_libraries(${PROJECT_NAME}  ${OPENSSL_SSL_LIBRARY} ${OPENSSL_CRYPTO_LIBRARY} ws2_32 Crypt32)

#编译命令在window上面：cmake -G "MinGW Makefiles" -DCMAKE_C_COMPILER=D:/software/codingSoft/mingw64/bin/gcc.exe -DCMAKE_CXX_COMPILER=D:/software/codingSoft/mingw64/bin